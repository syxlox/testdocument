\chapter{Bedarfsanalyse}
\label{cha:bedarf}
%%
\thispagestyle{scrheadings}
\pagestyle{scrheadings}
%%
Das Ziel der Arbeit ist das Transferieren eines \ac{mtp} einer \ac{hgü}-Anlage in die Umgebung von Polarion.\\
Die Oberfläche soll der Excel-Tabelle ähneln und für den User leicht zu bedienen sein.
Folgende Punkte sind zu berücksichtigen:
\begin{itemize}
 \item Hinterlegung eines Workflows im Tool (Zugriffsrechte auf verschiedene Phasen und Komponenten je nach Projektrolle) 
 \item Import- und Exportfunktionen aus dieser Datenbasis 
 \item Berücksichtigung der Dokumentationsvorgaben (Kapitel \ref{sec:iec})
 \item Definition der erforderlichen Variablen, Erstellen von Eingabemasken (UI)
 \item Integration eines Trackings über den Dokumentationsstand
 \end{itemize}
Punkt 1 ist zu Beginn gedacht, wird jedoch während der Bearbeitung verworfen bzw. verschoben.
Wie in Kapitel \ref{sec:polarion} genannt, gehört eine Import-/Exportfunktion bereits zum Umfang der Polarionfunktionalität. Jedoch ist es notwendig Importmasken zu definieren.
Während der Bearbeitung kommt die Idee auf, einen auf den Regeln zum Dokumentationsschema in Kapitel \ref{sub:61355} basierenden Workitem-Multiplikationsalgorythmus zu erstellen.
%%
\chapter{Entwurf}
\label{cha:ent}
\thispagestyle{scrheadings}
%%
Bevor erste Ansätze enstehen, werden intensive Einarbeitungsgespräche mit Betreuer Paul-Heinz Esters geführt, die dem Zweck dienen einen ersten groben Überblick der Thematiken zu erhalten. Daraufhin erfolgt wie einleitend genannt eine Einarbeitungs-  und Lernphase, durch mehrere Lernvideos und einem Admin-Key Training zu Polarion. Zusätzlich dazu werden Gespräche mit dem Kollegen Andoni Sainz Lopez geführt, über die API und die Erweiterung aus Kapitel \ref{sub:fmc}.\\
%%
\section{Grundelegender Arbeitsblauf}
\label{sec:ablauf}
Zu allem Anfang sollte der Ablauf des Projekts festgelegt werden. Dazu gehörte das Erstellen eines Übergeordneten Workflow-Diagramms. Der entgültige Arbeitsablauf steht erst zu Ende des Projekts fest, wird jedoch hier aufgeführt. Aufgrund der COVID-19 Pandemie laufen viele Unternehmensabläufe erschwert ab, die Kommunikation ist eingeschränkt und Tagungen von Ausschüssen zur Besprechung von internen Standards finden nicht oder verspätet statt. Das führt zu Verspätungen von Datenstandards, die zur Festlegung des Arbeitsablaufs nötig sind.
Zudem ergibt sich wie in Kapitel \ref{cha:bedarf} genannt die Idee zur \markss{Datensatz-Multiplikation} erst im Laufe der Bearbeitung.
Wie in \ref{sub:mtm} erläutert erfasst der \ac{mtp} abschließend auch die Testdokumente der Systemtests der \ac{mtm}. Da dieses Projekt, wie in Kapitel \ref{cha:stand} ausgeführt, allerdings noch nicht vollständig ausgereift ist, wird in der Implementierung nicht darauf geachtet.
Im folgenden ist der Ablauf geschildert.

%%
\pic{projectworkflow}{0.9}{Projekt-Ablaufdiagramm}{workflow}
%%
%%
\section{Gestaltung der Anwenderoberfläche}
\label{sec:gest}
%%
Die Anwenderoberfläche in Polarion sollte der Exceloberfläche so gut wie möglich ähneln, um dem Benutzer die Umstellung auf das neue Portal so einfach wie möglich zu machen.
Die benötigten \markss{Custom Fields} werden auf Grundlage des Excel-\ac{mtp} geplant, für Felder, die mit vordefinierten Inhalten gefüllt sind, werden Enumerationen vorgesehen. Je mehr Felder als Enumerationen konfiguriert werden können, desto einfacher ist es fehlerhafte Eingaben durch den Anwender zu verhinden. Da viele Felder, vorallem projektspezifische, wie z.B. die Stationskennung, nicht vorhersehbar sind, werden diese als Typ \markss{string} konfiguriert.
Eine Form-Konfiguartion wird zuerst theoretisch überlegt und auf Papier erstellt.
%%
%%
\section{Import- und Exportmasken}
\label{sec:import}
%%
Da das schlussendliche Projekt aus einer Mehrzahl an Datenbasen zusammengesetzt wird, muss feststehen, welche Informationen aus dem jeweiligen Import benötigt werden.\\
Wie in Abbildung \ref{fig:workflow} zu sehen ist, gibt es aktuell zwei Datenquellen für das Aufsetzen eines jden Projekts.
Aus der Excel-Vorlage des \ac{mtp} werdem alle Dokumente importiert, die den Aspect-Key Typ \markss{C} haben. Diese sind größtenteils für jedes Projekt gleich, sodass nur kleine Änderungen vorgenommen werden müssen. 
%%
\section{Javascripte auf der Basis FMC Work Item Save \ref{sub:fmc}}
\label{sec:javascripte}
%%
Um dem User das bedienen der Oberfläche zu vereinfachen wird mit Skripten des FMC-Einschubprogramms (Plugin) gearbeitet. Diese \markss{bauen} z.B. die, aus Kapitel \ref{sub:dokunummer} und \ref{sub:dokudatei}, Dokumentennummern und Dokumentendateinamen aus den einzelnen Bestandteilen zusammen. Es sollen so wenig Daten wie möglich importiert werden müssen, um die Importmasken bzw. die Exportmasken aus \ac{pam} so klein wie möglich zu halten. Deshalb füllen die Skripte das Workitem mit Daten, die aus dem kleinst-möglichen Import gewonnen werden können. Folgende Skripte werden verwendet:
%%
\begin{itemize}
	\item not\_save\_wo\_requiredfields.js
	\item otc\_subtype\_builder.js;
	\item docfile\_num\_builder.js;
	\item doc\_title\_from\_otc.js;
	\item title\_set\_name.js;
	\item dcc\_description\_setter.js;
	\item non\_physical.js;
	\item issued.js;
\end{itemize}
%%
Auf die eigentliche Implementierung, bzw. den genauen Nutzen wird später eingegangen.
%%
\section{Multiplikationsverfahren nach \ref{sub:61355}, Absatz 4}
\label{sec:multi}
%%

%%
\chapter{Implementierung}
\label{cha:impl}
\thispagestyle{scrheadings}
%%
%%
\chapter{Ergebnisse}
\label{cha:ergeb}
\thispagestyle{scrheadings}
%%
\chapter{Tests}
\label{cha:tests}
\thispagestyle{scrheadings}
%%

